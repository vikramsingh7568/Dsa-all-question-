
// sliding window this pattern involves creating a window which can wither be an array or number from once
//position to another depending on a certain condition, the window either increaes or closes (and a new window is created)
//very useful for keeping track of a subset of data in an array/string

//find find maximum of k number is a array 



let arr = [1,3,2,5,4,7,2,3,1]

let k = 4

let currentSum  = 0;

let maxSum    = 0;


  for(let i = 0; i<k; i++)
{
    currentSum+= arr[i]
  
}
  
maxSum = currentSum
  

  let n = 0;
 
 let l = 4;
 
 let m = arr.length-1; 
  
  
  while(l <= m){
    
   currentSum+= arr[l]
    
   currentSum-=arr[n]
      
  maxSum = Math.max(currentSum,maxSum)
   
   n++
      
l++
  
  }
   
 console.log(maxSum)






//let arr1 = [-20,-12,42,-10,25]
let 
//kadane's algortham
arr1 = [0,0,1,0,0,0,0,0,0,1,1]

let len = arr1.length;


function fun(arr1,len){

     let maxsum = -Infinity;

     let currsum = 0;

     
  
   for(let i = 0; i<arr1.length; i++){

         currsum = currsum+arr1[i]

         if(currsum > maxsum){

           maxsum = currsum;

         }

          if(currsum < 0){
 
           currsum = 0;

          }
 
    }

     return maxsum

}


let result =fun(arr1,len)

console.log(result)




Given an array consisting of N positive integers, and an integer k .You have to find the maximum product of k contiguous elements in the array. Your task is to complete the function which takes three arguments .The first argument  is the array A[ ] and second argument is an integer N denoting the size of the array A[ ] and the third argument  is an integer k.The function will return and value denoting the largest product of sub-array of size k.



let arr = [10,2,3,8,1,10,4]
 
let k = 4
 
let n = arr.length

  function findMaxProduct(arr,n,k)
{
let currentSum = 1;

let maxSum = 1;


  for(let i = 0; i<k; i++){

    currentSum*= arr[i]

  }
  
maxSum = currentSum

  for(let i =k; i<n; i++){

      currentSum*=arr[i];

      currentSum/=arr[i-k]

      maxSum = Math.max(maxSum,currentSum)

  }
  return maxSum
    }
  

let result = findMaxProduct(arr,n,k)
console.log(result)

