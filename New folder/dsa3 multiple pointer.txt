// multiple pointers or values that correspond to and index or position and move towards the beginning , end  or middle
// based on a certain condition 
// very efficient for solving problems with minimal space complexity as well 

//Question is given an array and the sum of pair so found that pair which is equal to sum
// example arr = [1,2,3,8,13,22,23] k = 21 answer is 8,13 =21  return 8,13
// lets see bruete force approch
// time complexity is O(n^2) n square
// space complexitty is O(1)
let arr = [1,2,3,8,13,22,23], k = 21
function fun(arr,k){
for(let i = 0 ; i<arr.length; i++){
    for(let j= i+1; j<arr.length; j++){
        if(arr[i] + arr[j] == k){
            return `${arr[i]} ${arr[j]}`
        }
    }
}
   return "not found"
}

let result = fun(arr,k)
console.log(result)

// two pointers approcach
// time complexity O(n log n)
//space complexitu O(1)
let arr1 = [1,2,3,4,5,6,7,], x = 11 , n = arr.length

function TwoPointer(arr1,x){
     arr1 = arr1.sort()
     var i = 0
     var j= n-i

     while(i < j){
        if(arr[i] + arr[j] == x){
            return 1; 
        }
         else if(arr[i] + arr[j] < x){
            i++;
         }else{
            j--;
         }
     }
      return 0;
}
let re = TwoPointer(arr1,x,n)
console.log(re)

//given sorted array of size n and a number x , find a pair in array whose sum is closest to x 

//let  x1 = 54 ,arr2 = [10,22,28,29,30,40],n1 = arr2.length
// output 22 , 30
//explanation as 22 + 30 = 52 ,is closest to 54
    function printClosest(arr,n,x)
    {
        let res_l=0, res_r=0;
        let l = 0, r = n-1, diff = Number.MAX_VALUE;
        while (r > l)
        {
            if (Math.abs(arr[l] +
                arr[r] - x) < diff)
            {
            res_l = l;
            res_r = r;
            diff = Math.abs(arr[l] + arr[r] - x);
            }
            if (arr[l] + arr[r] > x)
            r--;
            else // Move to larger values
            l++;
        }
 
    console.log(
    " The closest pair is "+arr[res_l]+" and "+ arr[res_r]
    );
}
     
        let arr2 = [10, 22, 28, 29, 30, 40], x1 = 54;
        let n1 = arr2.length;
        printClosest(arr2, n1, x1);       
 